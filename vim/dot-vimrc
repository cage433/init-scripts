set nocompatible              " be iMproved, required
filetype off                  " required

let g:orientation='landscape'
"let g:orientation='portrait'
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
Plugin 'gmarik/Vundle.vim'
Plugin 'altercation/vim-colors-solarized'

Plugin 'ctrlpvim/ctrlp.vim'
Plugin 'mileszs/ack.vim'
Plugin 'vim-scripts/bufferlist.vim'
Plugin 'vim-scripts/BufOnly.vim'
Plugin 'derekwyatt/vim-scala'
Plugin 'tpope/vim-fugitive'
Plugin 'scrooloose/nerdcommenter'
Plugin 'tpope/vim-fireplace'
Plugin 'tpope/vim-eunuch'
Plugin 'L9'
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on

"Needed to force vim-colors-solarized to autoload
" See https://github.com/altercation/vim-colors-solarized/issues/40
call togglebg#map("")
set wildignore +=*.sha1,*.html,tags,by_source_file,by_class,*.fasl,*.jar,*.class
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v([\/]\.git$)|([\/][A-Za-z0-9-_]+[\/]((target$))|(\.maker$))',
  \ 'file': '\v(\.xml$)'
  \ }
color solarized
set ruler
set rulerformat=%55(%{strftime('%a\ %b\ %e\ %I:%M\ %p')}\ %5l,%-6(%c%V%)\ %P%)

set background=light

set expandtab
set tabstop=4
set softtabstop=4
set shiftwidth=4
set backspace=indent,eol,start
syntax on

let mapleader=","
inoremap jk <ESC>
noremap <silent> <leader>sv :source $MYVIMRC<CR>
noremap <silent> <leader>se :e $MYVIMRC<CR>

noremap <leader>su :e $HOME/repos/init-scripts/vim/dot-vimrc<CR>

set wrap        
set backspace=indent,eol,start " allow backspacing over everything in insert mode
set autoindent    " always set autoindenting on
set copyindent    " copy the previous indentation on autoindenting
set shiftround    " use multiple of shiftwidth when indenting with '<' and '>'
set showmatch     " set show matching parenthesis
"set ignorecase    " ignore case when searching
set smartcase     " ignore case if search pattern is all lowercase,  case-sensitive otherwise
set smarttab      " insert tabs on the start of a line according to shiftwidth, not tabstop
set incsearch     " show search matches as you type
set gdefault
set nobackup
set noswapfile
set nopaste
set lazyredraw
set nomodeline
set fileformats+=dos

nnoremap ; :
nnoremap <leader>m ;
vnoremap ; :
vnoremap <leader>m ;
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

nnoremap j gj
nnoremap k gk
nnoremap gj j
nnoremap gk k



:set tabstop=2
:set shiftwidth=2
:set expandtab

:set gdefault

set encoding=utf-8
set scrolloff=3
set showmode
set showcmd
set hidden
set wildmenu
set wildmode=list:longest
set visualbell
set cursorline
set ttyfast
set backspace=indent,eol,start

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" MULTIPURPOSE TAB KEY
" Indent if we're at the beginning of a line. Else, do completion.
" Taken from https://github.com/garybernhardt/dotfiles
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! InsertTabWrapper()
    let col = col('.') - 1
    if !col || getline('.')[col - 1] !~ '\k'
        return "\<tab>"
    else
        return "\<c-p>"
    endif
endfunction
inoremap <tab> <c-r>=InsertTabWrapper()<cr>

noremap <silent> <F3> :call BufferList()<CR>

nnoremap <leader>, <C-^>

let g:ctrlp_map = ',f'
let g:ctrlp_working_path_mode = 0
let g:ctrlp_by_filename = 1
let g:ctrlp_dotfiles = 0
"let g:ctrlp_custom_ignore = '\.git$\|\.xml$|\.fasl$|\.class$'

let g:ackprg="ack-grep --type=noxml -H --nocolor --nogroup --column"


function! RefreshTags()
    exec "silent ! update-tags.sh"
    redraw!
endfunction
command! RefreshCTags call RefreshTags()
noremap <leader>ct :silent :call RefreshTags()<CR>

function! ToggleSplit()
  if winnr("$") == 1
    if g:orientation == "landscape"
      vsplit
    else
      split
    endif
  else
    only
  endif
endfunction
map <silent> <F10> :call ToggleSplit()<CR>

function! TogglePaste()
  set paste!
  if &paste
    echo "Paste On"
  else
    echo "Paste Off"
  endif
endfunction
noremap <silent> <F4> :call TogglePaste()<CR>


syntax enable
set t_Co=16
"let g:dark_view=1
"set background=dark
"let g:solarized_termcolors=256
let g:solarized_termtrans=1
let g:solarized_termcolors=16
colorscheme solarized


function! SplitScreenIfNecessary()
  if winnr("$") == 1
    exec ":silent only"
    if g:orientation == "landscape"
      exec ":vsplit"
    else
      exec ":split"
    end
  endif
  exec "normal \<C-w>w"
endfunction

function! OpenTagInOtherWindow()
  let tag = expand("<cword>")
  call SplitScreenIfNecessary()
  exec ":tag " . tag
endfunction

noremap <leader>w :call OpenTagInOtherWindow()<CR>,/

map <F6> :CtrlPClearAllCaches<CR>
map <F9> :set invnumber<CR>

function! RefreshTags()
    exec "silent ! ctags -R ."
    redraw!
endfunction
noremap <leader>ct :silent :call RefreshTags()<CR>

autocmd FileType scala setlocal shiftwidth=2 tabstop=2 colorcolumn=118

set statusline=%f
let s:hidden_all = 0
function! ToggleHiddenAll()
    if s:hidden_all  == 0
        let s:hidden_all = 1
        set noshowmode
        set noruler
        set laststatus=0
        set noshowcmd
    else
        let s:hidden_all = 0
        set showmode
        set ruler
        set laststatus=2
        set showcmd
    endif
endfunction

nnoremap <S-h> :call ToggleHiddenAll()<CR>
noremap <silent> <leader>sq :e /home/alex/.vim/bundle/scalaimports/autoload/scalaimports/state.vim<CR>
