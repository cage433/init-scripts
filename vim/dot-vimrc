set nocompatible
call pathogen#helptags()
call pathogen#runtime_append_all_bundles() 
let mapleader=","
nmap <silent> <leader>sv :w $MYVIMRC<CR>:so $MYVIMRC<CR>
nmap <silent> <leader>se :e $MYVIMRC<CR>
set hidden

set wrap        
set backspace=indent,eol,start " allow backspacing over everything in insert mode
set autoindent    " always set autoindenting on
set copyindent    " copy the previous indentation on autoindenting
set number        " always show line numbers
set shiftround    " use multiple of shiftwidth when indenting with '<' and '>'
set showmatch     " set show matching parenthesis
set ignorecase    " ignore case when searching
set smartcase     " ignore case if search pattern is all lowercase,  case-sensitive otherwise
set smarttab      " insert tabs on the start of a line according to shiftwidth, not tabstop
set hlsearch      " highlight search terms
set incsearch     " show search matches as you type
set gdefault
set nobackup
set noswapfile
set pastetoggle=<F2>
set lazyredraw
nnoremap ; :
nnoremap \ ;
map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l
nmap <silent> ,/ :nohlsearch<CR>
map j gj
map k gk

map ,; :s /^/;; /<CR>
map ,: :s /^;; //<CR>
map <F2> :set hlsearch!<CR>
map <silent> <F3> :call BufferList()<CR>
set showmatch
set cpoptions-=m
nmap <C-p> ?^(<CR>
nmap <C-n> /^(<CR>
syntax enable
"syntax off
filetype plugin indent on
set autowrite
autocmd FileType scala setlocal shiftwidth=2 tabstop=2

" Change PWD to that of the current file
map <silent> ,c :cd %:h<CR>

" Revert PWD to its original value
let g:initialdir = getcwd()
function! PutPwdBack()
	exec ":cd " . g:initialdir
endfunction
map ,d :call PutPwdBack()<CR>

" disable arrow keys
map <up> <nop>
map <down> <nop>
map <left> <nop>
map <right> <nop>
imap <up> <nop>
imap <down> <nop>
imap <left> <nop>
imap <right> <nop>

:set tabstop=2
:set shiftwidth=2
:set expandtab

:set gdefault

inoremap jj <ESC>

set encoding=utf-8
set scrolloff=3
set autoindent
set showmode
set showcmd
set hidden
set wildmenu
set wildmode=list:longest
set visualbell
set cursorline
set ttyfast
set ruler
set backspace=indent,eol,start
"set laststatus=
"set relativenumber
"set undofile

"Search recursively for tags file
set tags=tags;/

" CD to the current files directory
"


:set noignorecase
:set textwidth=0

" comment and uncomment
map ,m mb:.,'as/^/\/\/<CR>,/'b
map ,n mb:.,'as/^\/\///g<CR>,/'b

"show starling imports
map ,i ma:r ! find_imports.rb <cword><CR>`a

"Show sub classes
map ,s ma:r ! find_subtypes.rb <cword><CR>`a

" show all imports
map ,o ma:r ! find_imports.rb <cword> -a<CR>`a

function! SaveWinline()
  let g:currentwinline = winline()
endfunction

" Stops the buffer jumping around when adding imports
function! RestoreWinline()
  while winline() > g:currentwinline
    exec "normal \<C-e>"
  endwhile
  while winline() < g:currentwinline
    exec "normal \<C-y>"
  endwhile
endfunction

function! SplitScreenIfNecessary()
  if winnr() == 1
    exec ":silent only"
    exec ":vs"
  endif
  exec "normal \<C-w>w"
endfunction

"Put the selected import line at the top and delete any others
map ,u ma?^[^i]<CR>mb:call SaveWinline()<CR>'ayy'b?^i<CR>p'b:.,$g/^import/d<CR>'b,/:call RestoreWinline()<CR>

"jump to parent class
map ,p ?extends<CR>w<C-]>

function! OutputDateAndSwitchBuffer()
  exec ":silent r ! date"
  w
  exec "normal gg"
  exec "normal \<C-w>w"
endfunction
function! CompileThisFile()
  let scalafile = expand("%:p")
  let classdir = "/" . join(split(scalafile, "/")[0:3], "/") .  "/target/scala_2.8.0.final-local/classes/"
  w
  call SplitScreenIfNecessary()
  exec ":silent vi ~/starling/starling_comp"
  exec ":silent normal ggdG"

  exec ":silent r ! fsc -d " . classdir . " " . scalafile . " | cat"
  call OutputDateAndSwitchBuffer()
endfunction

map <silent> ,l :call CompileThisFile()<CR>

function! RunATest(scalafile, classname)
  let g:lasttestfile = a:scalafile
  let g:lastclassname = a:classname
  let pkg = join(split(a:scalafile, "/")[5:-2], ".")
  "let classname = expand("%:r")
  let fullclassname = pkg . "." . a:classname
  w
  call SplitScreenIfNecessary()
  exec ":silent vi ~/starling/starling_test"
  exec ":silent normal ggdG"

  exec ":silent r ! scala org.testng.TestNG -listener starling.utils.SBTTestListener -testclass " . fullclassname . " | cat "
  call OutputDateAndSwitchBuffer()
endfunction

function! RunThisTest() 
  call RunATest(expand("%:p"), expand("%:t:r"))
endfunction

function! RunLastTest()
  call RunATest(g:lasttestfile, g:lastclassname)
endfunction

function! ToggleSourceAndTestFile()
  exec ":vi " . TestOrSourceFile()
endfunction


function! ToggleSourceAndTestFileOtherWindow()
  let otherfile = TestOrSourceFile()
  call SplitScreenIfNecessary()
  exec ":vi " . otherfile
endfunction

function! TestOrSourceFile()
  if stridx(expand("%"), "Tests.scala") == -1
    return substitute(expand("%:r"), "\/src\/", "/tests/", "") . "Tests.scala" 
  else 
    let otherfile = substitute(expand("%:r"), "\/tests\/", "/src/", "")
    return substitute(otherfile, "Tests", "", "") . ".scala"
  endif
endfunction

function! OpenTagInOtherWindow()
  let tag = expand("<cword>")
  call SplitScreenIfNecessary()
  exec ":tag " . tag
endfunction



map ,t :call ToggleSourceAndTestFile()<CR>
map ,T :call ToggleSourceAndTestFileOtherWindow()<CR>

map ,k :call RunThisTest()<CR>
map ,j :call RunLastTest()<CR>
map ,J :call CompileThisFile()<CR>:call RunLastTest()<CR>

map ,w :call OpenTagInOtherWindow()<CR>,/
